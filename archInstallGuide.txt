View this installation guide online at
https://wiki.archlinux.org/index.php/Installation_Guide

   This document is a guide for installing Arch Linux from the live system
   booted with the official installation image. Before installing, it
   would be advised to view the FAQ. 

   For more detailed instructions, see the respective ArchWiki articles or
   the various programs' man pages.

   Arch Linux should run on any x86_64-compatible machine with a minimum
   of 512 MiB RAM. A basic installation should take less than 800 MiB of
   disk space. As the installation process needs to retrieve packages from
   a remote repository, this guide assumes a working internet connection
   is available.


########################################
######     Begin-installation     ######
########################################

# Verify image signature
gpg --keyserver-options auto-key-retrieve --verify archlinux-version-x86_64.iso.sig


# Alternatively, from an existing Arch Linux installation run:
pacman-key -v archlinux-version-x86_64.iso.sig


# Verify the boot mode
# I will always be installing as MBR, no need for UEFI and the boot partition. 
ls /sys/firmware/efi/efivars


# Ensure your network interface is listed and enabled
ip link


# Configure your network connection:
# Static IP address
# Dynamic IP address: use DHCP.
# Note: The installation image enables dhcpcd for wired network devices boot.
# Verify connection
ping archlinux.org


# Update the system clock
timedatectl set-ntp true


# Partition the disks. Find device naming scheme
fdisk -l


#If you want to create any stacked block devices for LVM, system encryption or RAID, do it now.
fdisk /dev/xX


# Format the partitions. Use ext4 for both root and home directories.
mkfs.ext4 /dev/xX


# If you created a partition for swap, initialize it with mkswap:
mkswap /dev/xX
swapon /dev/xX


# Mount the file systems. Mount root to /mnt
mount /dev/xX1 /mnt


# Create any remaining mount points (such as /mnt/home) and mount their corresponding partitions.


# Installation

# Update your mirrorlist and put a few United States mirros at the top of the list.
# Install only essential packages. Wait to install user packages once the system is functional on its own.
vim /etc/pacman.d/mirrorlist
pacstrap /mnt base linux linux-firmware networkmanager stow git grub amd-ucode gcc make perl xorg-server xorg-xinit neovim dosfstools os-prober wpa_supplicant dialog sudo openssh

[ rxvt-unicode, cmus, dmenu, xorg-xrandr, unzip, firefox, tmux, alsa-utils ]


# Generate your file system table. Afterwards check /mnt/etc/fstab for errors.
genfstab -U /mnt >> /mnt/etc/fstab


# Chroot into the new environment
arch-chroot /mnt


# Set the time zone and sync the system to the hardware clock 
ln -sf /usr/share/zoneinfo/Region/City /etc/localtime
hwclock --systohc


# Localization. Uncomment en_US.UTF-8 UTF-8 and other needed locales in /etc/locale.gen, and generate them.
locale-gen


# Create the locale.conf(5) file, and set the LANG variable accordingly:
# Add this to the file listed below: LANG=en_US.UTF-8
vim /etc/locale.conf


# Create the hostname file /etc/hostname and add whatever hostname you want to the first line
vim /etc/hostname


# Add matching entries to hosts(5):
# If the system has a permanent IP address, it should be used instead of 127.0.1.1.
vim /etc/hosts

# Add the following:
	127.0.0.1       localhost
	::1             localhost
	127.0.1.1       myhostname.localdomain  myhostname


# Initramfs
# Creating a new initramfs is usually not required, mkinitcpio was run on installation of the kernel package with pacstrap.
# For LVM, system encryption or RAID, modify mkinitcpio.conf(5) and recreate the initramfs image:
mkinitcpio -P


# Set the root password
passwd


# Boot loader (i use grub for this in MBR format. Install to the disk, NOT a partition)
grub-install --target=i386-pc /dev/xX


# Generate the main grub config file
grub-mkconfig -o /boot/grub/grub.cfg


# Exit the chroot environment 
exit


# Unmount all partitions
umount -R /mnt


# Poweroff. Remove the installtion media then power on. Your system should boot to grub. Congrats!


########################################
######      Post-installation     ######
########################################

# Log in with root
# Enable networking
systemctl start NetworkManager
systemctl enable --now NetworkManager


# Get your system up to date and investigate any errors
pacman -Syyyu


# Add users
useradd -m -g users -G wheel <user>


# Set the user's password
passwd <user>


# Add <user> to sudoers:
visudo


# Exit the root user then log in to the user to verify functionality
# Optionally, reboot to ensure everything is still working as intended. Log in as user on reboot.
# If migrating from an old setup copy the pacman cache to this new machine.
rsync -av /path/to/old /var/cache/pacman/pkg

# Get the config files for your system. If your new machine is closer in setup to the thinkpad or desktop choose the
# correct branch.
git clone git@github.com:TopDownTom/dotfiles.git $HOME/.files
git checkout <branch you need> 


# Deploy the config files. Run first with -n flag to ensure everything looks right. Then run it again without -n if it does.
# Stow can be a bit tricky, you may need to do this one at a time. Also, Firefox will not work for userChrome because the
# profile directory is a randomString.default-release so this will need to be updated to the new directory once Firefox
# is installed.
stow -nvt ~ *


# Install your old packages
sudo pacman -S --needed - < /path/to/pkglist.txt

# If things don't work from here, investigate. This could be for a variety of reasons. Likely, if you've made it this far
# though the installation went okay and its a matter of tweaking configs or whatever.

#########
# TO DO #
#########
- Add font installation
- 
